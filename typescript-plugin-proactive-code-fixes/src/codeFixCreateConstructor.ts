import { Node, Scope, TypeGuards } from 'ts-simple-ast';
import * as ts from 'typescript';
import { CodeFix } from './codeFixes';

export const codeFixCreateConstructor: CodeFix = {
  name: 'Declare constructor',
  config: { variableType: 'const' },
  predicate: (diag: ts.Diagnostic, child: ts.Node) => {
    if (diag.code === 2554 && child.parent.kind === ts.SyntaxKind.VariableDeclarationList) {
      const syntaxList = child.parent.getChildren().find(c => c.kind === ts.SyntaxKind.SyntaxList)
      if (!syntaxList) { return false }
      const variableDecl = syntaxList.getChildren().find(c => c.kind === ts.SyntaxKind.VariableDeclaration)
      if (!variableDecl) { return false }
      const newExpression = variableDecl.getChildren().find(c => c.kind == ts.SyntaxKind.NewExpression)
      if (!newExpression) { return false }
      return true
    }
    return false
  },
  description: (diag: ts.Diagnostic, child: ts.Node): string => `Declare constructor "${child.getText()}"`,
  apply: (diag: ts.Diagnostic, child: Node) => {
    const newExpression = child.getParent().getChildrenOfKind(ts.SyntaxKind.SyntaxList)[0].getChildrenOfKind(ts.SyntaxKind.VariableDeclaration)[0].getChildrenOfKind(ts.SyntaxKind.NewExpression)[0]
    const argTypes = newExpression.getArguments().map(arg => arg.getType().getApparentType().getText())
    const classDeclaration = newExpression.getExpression().getSymbol().getDeclarations()[0]
    if (TypeGuards.isClassDeclaration(classDeclaration)) {
      classDeclaration.addConstructor({
        // docs: 'Autogenerated constructor',
        scope: Scope.Public,
        parameters: argTypes.map(type => ({
          name: `a${type.substring(0, 1).toUpperCase()}${type.substring(1, type.length)}`,
          hasQuestionToken: false,
          type,
          isRestParameter: false,
          // scope: Scope.,
        })
        )
      })
    }
  }
};

// registerCodeFix(codeFixCreateConstructor)